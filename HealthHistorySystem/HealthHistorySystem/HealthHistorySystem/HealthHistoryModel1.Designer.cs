//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("HealthHistoryModel", "FK_Patient_City1", "City", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.City), "Patient", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.Patient), true)]
[assembly: EdmRelationshipAttribute("HealthHistoryModel", "FK_Patient_Nationality", "Nationality", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.Nationality), "Patient", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.Patient), true)]
[assembly: EdmRelationshipAttribute("HealthHistoryModel", "FK_Patient_Sec_Users1", "Sec_Users", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.Sec_Users), "Patient", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.Patient), true)]
[assembly: EdmRelationshipAttribute("HealthHistoryModel", "FK_PatientMedicin_Patient", "Patient", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.Patient), "PatientMedicin", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.PatientMedicin), true)]
[assembly: EdmRelationshipAttribute("HealthHistoryModel", "FK_PatientReg_Patient", "Patient", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.Patient), "PatientReg", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.PatientReg), true)]
[assembly: EdmRelationshipAttribute("HealthHistoryModel", "FK_PatientMedicin_PatientReg", "PatientReg", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.PatientReg), "PatientMedicin", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.PatientMedicin), true)]
[assembly: EdmRelationshipAttribute("HealthHistoryModel", "FK_PatientReg_Proc_Type", "Proc_Type", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.Proc_Type), "PatientReg", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.PatientReg), true)]
[assembly: EdmRelationshipAttribute("HealthHistoryModel", "FK_Proc_Type_Proc_Category", "Proc_Category", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.Proc_Category), "Proc_Type", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.Proc_Type), true)]
[assembly: EdmRelationshipAttribute("HealthHistoryModel", "FK_Sec_Users_Sec_UserType", "Sec_UserType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.Sec_UserType), "Sec_Users", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.Sec_Users), true)]
[assembly: EdmRelationshipAttribute("HealthHistoryModel", "FK_Organization_OrganizationType", "OrganizationType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.OrganizationType), "Organization", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.Organization), true)]
[assembly: EdmRelationshipAttribute("HealthHistoryModel", "FK_PatientReg_Organization", "Organization", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.Organization), "PatientReg", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HealthHistorySystem.HealthHistorySystem.HealthHistorySystem.PatientReg), true)]

#endregion

namespace HealthHistorySystem.HealthHistorySystem.HealthHistorySystem
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class HealthHistoryEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new HealthHistoryEntities object using the connection string found in the 'HealthHistoryEntities' section of the application configuration file.
        /// </summary>
        public HealthHistoryEntities() : base("name=HealthHistoryEntities", "HealthHistoryEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new HealthHistoryEntities object.
        /// </summary>
        public HealthHistoryEntities(string connectionString) : base(connectionString, "HealthHistoryEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new HealthHistoryEntities object.
        /// </summary>
        public HealthHistoryEntities(EntityConnection connection) : base(connection, "HealthHistoryEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<City> Cities
        {
            get
            {
                if ((_Cities == null))
                {
                    _Cities = base.CreateObjectSet<City>("Cities");
                }
                return _Cities;
            }
        }
        private ObjectSet<City> _Cities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Nationality> Nationalities
        {
            get
            {
                if ((_Nationalities == null))
                {
                    _Nationalities = base.CreateObjectSet<Nationality>("Nationalities");
                }
                return _Nationalities;
            }
        }
        private ObjectSet<Nationality> _Nationalities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<OrganizationType> OrganizationTypes
        {
            get
            {
                if ((_OrganizationTypes == null))
                {
                    _OrganizationTypes = base.CreateObjectSet<OrganizationType>("OrganizationTypes");
                }
                return _OrganizationTypes;
            }
        }
        private ObjectSet<OrganizationType> _OrganizationTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Patient> Patients
        {
            get
            {
                if ((_Patients == null))
                {
                    _Patients = base.CreateObjectSet<Patient>("Patients");
                }
                return _Patients;
            }
        }
        private ObjectSet<Patient> _Patients;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PatientMedicin> PatientMedicins
        {
            get
            {
                if ((_PatientMedicins == null))
                {
                    _PatientMedicins = base.CreateObjectSet<PatientMedicin>("PatientMedicins");
                }
                return _PatientMedicins;
            }
        }
        private ObjectSet<PatientMedicin> _PatientMedicins;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PatientReg> PatientRegs
        {
            get
            {
                if ((_PatientRegs == null))
                {
                    _PatientRegs = base.CreateObjectSet<PatientReg>("PatientRegs");
                }
                return _PatientRegs;
            }
        }
        private ObjectSet<PatientReg> _PatientRegs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Proc_Category> Proc_Category
        {
            get
            {
                if ((_Proc_Category == null))
                {
                    _Proc_Category = base.CreateObjectSet<Proc_Category>("Proc_Category");
                }
                return _Proc_Category;
            }
        }
        private ObjectSet<Proc_Category> _Proc_Category;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Proc_Type> Proc_Type
        {
            get
            {
                if ((_Proc_Type == null))
                {
                    _Proc_Type = base.CreateObjectSet<Proc_Type>("Proc_Type");
                }
                return _Proc_Type;
            }
        }
        private ObjectSet<Proc_Type> _Proc_Type;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Sec_Users> Sec_Users
        {
            get
            {
                if ((_Sec_Users == null))
                {
                    _Sec_Users = base.CreateObjectSet<Sec_Users>("Sec_Users");
                }
                return _Sec_Users;
            }
        }
        private ObjectSet<Sec_Users> _Sec_Users;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Sec_UserType> Sec_UserType
        {
            get
            {
                if ((_Sec_UserType == null))
                {
                    _Sec_UserType = base.CreateObjectSet<Sec_UserType>("Sec_UserType");
                }
                return _Sec_UserType;
            }
        }
        private ObjectSet<Sec_UserType> _Sec_UserType;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<sysdiagram> sysdiagrams
        {
            get
            {
                if ((_sysdiagrams == null))
                {
                    _sysdiagrams = base.CreateObjectSet<sysdiagram>("sysdiagrams");
                }
                return _sysdiagrams;
            }
        }
        private ObjectSet<sysdiagram> _sysdiagrams;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Organization> Organizations
        {
            get
            {
                if ((_Organizations == null))
                {
                    _Organizations = base.CreateObjectSet<Organization>("Organizations");
                }
                return _Organizations;
            }
        }
        private ObjectSet<Organization> _Organizations;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Cities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCities(City city)
        {
            base.AddObject("Cities", city);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Nationalities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToNationalities(Nationality nationality)
        {
            base.AddObject("Nationalities", nationality);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the OrganizationTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToOrganizationTypes(OrganizationType organizationType)
        {
            base.AddObject("OrganizationTypes", organizationType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Patients EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPatients(Patient patient)
        {
            base.AddObject("Patients", patient);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PatientMedicins EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPatientMedicins(PatientMedicin patientMedicin)
        {
            base.AddObject("PatientMedicins", patientMedicin);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PatientRegs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPatientRegs(PatientReg patientReg)
        {
            base.AddObject("PatientRegs", patientReg);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Proc_Category EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProc_Category(Proc_Category proc_Category)
        {
            base.AddObject("Proc_Category", proc_Category);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Proc_Type EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProc_Type(Proc_Type proc_Type)
        {
            base.AddObject("Proc_Type", proc_Type);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Sec_Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSec_Users(Sec_Users sec_Users)
        {
            base.AddObject("Sec_Users", sec_Users);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Sec_UserType EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSec_UserType(Sec_UserType sec_UserType)
        {
            base.AddObject("Sec_UserType", sec_UserType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the sysdiagrams EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTosysdiagrams(sysdiagram sysdiagram)
        {
            base.AddObject("sysdiagrams", sysdiagram);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Organizations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToOrganizations(Organization organization)
        {
            base.AddObject("Organizations", organization);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HealthHistoryModel", Name="City")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class City : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new City object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        public static City CreateCity(global::System.Int32 id, global::System.String name)
        {
            City city = new City();
            city.id = id;
            city.name = name;
            return city;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_Patient_City1", "Patient")]
        public EntityCollection<Patient> Patients
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Patient>("HealthHistoryModel.FK_Patient_City1", "Patient");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Patient>("HealthHistoryModel.FK_Patient_City1", "Patient", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HealthHistoryModel", Name="Nationality")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Nationality : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Nationality object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        public static Nationality CreateNationality(global::System.Int32 id, global::System.String name)
        {
            Nationality nationality = new Nationality();
            nationality.id = id;
            nationality.name = name;
            return nationality;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_Patient_Nationality", "Patient")]
        public EntityCollection<Patient> Patients
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Patient>("HealthHistoryModel.FK_Patient_Nationality", "Patient");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Patient>("HealthHistoryModel.FK_Patient_Nationality", "Patient", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HealthHistoryModel", Name="Organization")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Organization : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Organization object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="orgtypeid">Initial value of the orgtypeid property.</param>
        /// <param name="name">Initial value of the name property.</param>
        /// <param name="address">Initial value of the address property.</param>
        public static Organization CreateOrganization(global::System.Int32 id, global::System.Int32 orgtypeid, global::System.String name, global::System.String address)
        {
            Organization organization = new Organization();
            organization.id = id;
            organization.orgtypeid = orgtypeid;
            organization.name = name;
            organization.address = address;
            return organization;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 orgtypeid
        {
            get
            {
                return _orgtypeid;
            }
            set
            {
                OnorgtypeidChanging(value);
                ReportPropertyChanging("orgtypeid");
                _orgtypeid = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("orgtypeid");
                OnorgtypeidChanged();
            }
        }
        private global::System.Int32 _orgtypeid;
        partial void OnorgtypeidChanging(global::System.Int32 value);
        partial void OnorgtypeidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String address
        {
            get
            {
                return _address;
            }
            set
            {
                OnaddressChanging(value);
                ReportPropertyChanging("address");
                _address = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("address");
                OnaddressChanged();
            }
        }
        private global::System.String _address;
        partial void OnaddressChanging(global::System.String value);
        partial void OnaddressChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String phone
        {
            get
            {
                return _phone;
            }
            set
            {
                OnphoneChanging(value);
                ReportPropertyChanging("phone");
                _phone = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("phone");
                OnphoneChanged();
            }
        }
        private global::System.String _phone;
        partial void OnphoneChanging(global::System.String value);
        partial void OnphoneChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String mobile
        {
            get
            {
                return _mobile;
            }
            set
            {
                OnmobileChanging(value);
                ReportPropertyChanging("mobile");
                _mobile = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("mobile");
                OnmobileChanged();
            }
        }
        private global::System.String _mobile;
        partial void OnmobileChanging(global::System.String value);
        partial void OnmobileChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String e_mail
        {
            get
            {
                return _e_mail;
            }
            set
            {
                One_mailChanging(value);
                ReportPropertyChanging("e_mail");
                _e_mail = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("e_mail");
                One_mailChanged();
            }
        }
        private global::System.String _e_mail;
        partial void One_mailChanging(global::System.String value);
        partial void One_mailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String website
        {
            get
            {
                return _website;
            }
            set
            {
                OnwebsiteChanging(value);
                ReportPropertyChanging("website");
                _website = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("website");
                OnwebsiteChanged();
            }
        }
        private global::System.String _website;
        partial void OnwebsiteChanging(global::System.String value);
        partial void OnwebsiteChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_Organization_OrganizationType", "OrganizationType")]
        public OrganizationType OrganizationType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<OrganizationType>("HealthHistoryModel.FK_Organization_OrganizationType", "OrganizationType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<OrganizationType>("HealthHistoryModel.FK_Organization_OrganizationType", "OrganizationType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<OrganizationType> OrganizationTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<OrganizationType>("HealthHistoryModel.FK_Organization_OrganizationType", "OrganizationType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<OrganizationType>("HealthHistoryModel.FK_Organization_OrganizationType", "OrganizationType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_PatientReg_Organization", "PatientReg")]
        public EntityCollection<PatientReg> PatientRegs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PatientReg>("HealthHistoryModel.FK_PatientReg_Organization", "PatientReg");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PatientReg>("HealthHistoryModel.FK_PatientReg_Organization", "PatientReg", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HealthHistoryModel", Name="OrganizationType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class OrganizationType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new OrganizationType object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        public static OrganizationType CreateOrganizationType(global::System.Int32 id, global::System.String name)
        {
            OrganizationType organizationType = new OrganizationType();
            organizationType.id = id;
            organizationType.name = name;
            return organizationType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_Organization_OrganizationType", "Organization")]
        public EntityCollection<Organization> Organizations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Organization>("HealthHistoryModel.FK_Organization_OrganizationType", "Organization");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Organization>("HealthHistoryModel.FK_Organization_OrganizationType", "Organization", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HealthHistoryModel", Name="Patient")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Patient : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Patient object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        public static Patient CreatePatient(global::System.Int32 id)
        {
            Patient patient = new Patient();
            patient.id = id;
            return patient;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String mothername
        {
            get
            {
                return _mothername;
            }
            set
            {
                OnmothernameChanging(value);
                ReportPropertyChanging("mothername");
                _mothername = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("mothername");
                OnmothernameChanged();
            }
        }
        private global::System.String _mothername;
        partial void OnmothernameChanging(global::System.String value);
        partial void OnmothernameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> cityid
        {
            get
            {
                return _cityid;
            }
            set
            {
                OncityidChanging(value);
                ReportPropertyChanging("cityid");
                _cityid = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("cityid");
                OncityidChanged();
            }
        }
        private Nullable<global::System.Int32> _cityid;
        partial void OncityidChanging(Nullable<global::System.Int32> value);
        partial void OncityidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> natid
        {
            get
            {
                return _natid;
            }
            set
            {
                OnnatidChanging(value);
                ReportPropertyChanging("natid");
                _natid = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("natid");
                OnnatidChanged();
            }
        }
        private Nullable<global::System.Int32> _natid;
        partial void OnnatidChanging(Nullable<global::System.Int32> value);
        partial void OnnatidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String nationalityno
        {
            get
            {
                return _nationalityno;
            }
            set
            {
                OnnationalitynoChanging(value);
                ReportPropertyChanging("nationalityno");
                _nationalityno = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("nationalityno");
                OnnationalitynoChanged();
            }
        }
        private global::System.String _nationalityno;
        partial void OnnationalitynoChanging(global::System.String value);
        partial void OnnationalitynoChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String address
        {
            get
            {
                return _address;
            }
            set
            {
                OnaddressChanging(value);
                ReportPropertyChanging("address");
                _address = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("address");
                OnaddressChanged();
            }
        }
        private global::System.String _address;
        partial void OnaddressChanging(global::System.String value);
        partial void OnaddressChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String phone
        {
            get
            {
                return _phone;
            }
            set
            {
                OnphoneChanging(value);
                ReportPropertyChanging("phone");
                _phone = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("phone");
                OnphoneChanged();
            }
        }
        private global::System.String _phone;
        partial void OnphoneChanging(global::System.String value);
        partial void OnphoneChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String mobile
        {
            get
            {
                return _mobile;
            }
            set
            {
                OnmobileChanging(value);
                ReportPropertyChanging("mobile");
                _mobile = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("mobile");
                OnmobileChanged();
            }
        }
        private global::System.String _mobile;
        partial void OnmobileChanging(global::System.String value);
        partial void OnmobileChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                OnUserIdChanging(value);
                ReportPropertyChanging("UserId");
                _UserId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserId");
                OnUserIdChanged();
            }
        }
        private Nullable<global::System.Int32> _UserId;
        partial void OnUserIdChanging(Nullable<global::System.Int32> value);
        partial void OnUserIdChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_Patient_City1", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("HealthHistoryModel.FK_Patient_City1", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("HealthHistoryModel.FK_Patient_City1", "City").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("HealthHistoryModel.FK_Patient_City1", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("HealthHistoryModel.FK_Patient_City1", "City", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_Patient_Nationality", "Nationality")]
        public Nationality Nationality
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nationality>("HealthHistoryModel.FK_Patient_Nationality", "Nationality").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nationality>("HealthHistoryModel.FK_Patient_Nationality", "Nationality").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Nationality> NationalityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nationality>("HealthHistoryModel.FK_Patient_Nationality", "Nationality");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Nationality>("HealthHistoryModel.FK_Patient_Nationality", "Nationality", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_Patient_Sec_Users1", "Sec_Users")]
        public Sec_Users Sec_Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Sec_Users>("HealthHistoryModel.FK_Patient_Sec_Users1", "Sec_Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Sec_Users>("HealthHistoryModel.FK_Patient_Sec_Users1", "Sec_Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Sec_Users> Sec_UsersReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Sec_Users>("HealthHistoryModel.FK_Patient_Sec_Users1", "Sec_Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Sec_Users>("HealthHistoryModel.FK_Patient_Sec_Users1", "Sec_Users", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_PatientMedicin_Patient", "PatientMedicin")]
        public EntityCollection<PatientMedicin> PatientMedicins
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PatientMedicin>("HealthHistoryModel.FK_PatientMedicin_Patient", "PatientMedicin");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PatientMedicin>("HealthHistoryModel.FK_PatientMedicin_Patient", "PatientMedicin", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_PatientReg_Patient", "PatientReg")]
        public EntityCollection<PatientReg> PatientRegs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PatientReg>("HealthHistoryModel.FK_PatientReg_Patient", "PatientReg");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PatientReg>("HealthHistoryModel.FK_PatientReg_Patient", "PatientReg", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HealthHistoryModel", Name="PatientMedicin")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PatientMedicin : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PatientMedicin object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        public static PatientMedicin CreatePatientMedicin(global::System.Int32 id)
        {
            PatientMedicin patientMedicin = new PatientMedicin();
            patientMedicin.id = id;
            return patientMedicin;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> opregid
        {
            get
            {
                return _opregid;
            }
            set
            {
                OnopregidChanging(value);
                ReportPropertyChanging("opregid");
                _opregid = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("opregid");
                OnopregidChanged();
            }
        }
        private Nullable<global::System.Int32> _opregid;
        partial void OnopregidChanging(Nullable<global::System.Int32> value);
        partial void OnopregidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> patientid
        {
            get
            {
                return _patientid;
            }
            set
            {
                OnpatientidChanging(value);
                ReportPropertyChanging("patientid");
                _patientid = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("patientid");
                OnpatientidChanged();
            }
        }
        private Nullable<global::System.Int32> _patientid;
        partial void OnpatientidChanging(Nullable<global::System.Int32> value);
        partial void OnpatientidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String medicinname
        {
            get
            {
                return _medicinname;
            }
            set
            {
                OnmedicinnameChanging(value);
                ReportPropertyChanging("medicinname");
                _medicinname = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("medicinname");
                OnmedicinnameChanged();
            }
        }
        private global::System.String _medicinname;
        partial void OnmedicinnameChanging(global::System.String value);
        partial void OnmedicinnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> fromdate
        {
            get
            {
                return _fromdate;
            }
            set
            {
                OnfromdateChanging(value);
                ReportPropertyChanging("fromdate");
                _fromdate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("fromdate");
                OnfromdateChanged();
            }
        }
        private Nullable<global::System.DateTime> _fromdate;
        partial void OnfromdateChanging(Nullable<global::System.DateTime> value);
        partial void OnfromdateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> todate
        {
            get
            {
                return _todate;
            }
            set
            {
                OntodateChanging(value);
                ReportPropertyChanging("todate");
                _todate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("todate");
                OntodateChanged();
            }
        }
        private Nullable<global::System.DateTime> _todate;
        partial void OntodateChanging(Nullable<global::System.DateTime> value);
        partial void OntodateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String note
        {
            get
            {
                return _note;
            }
            set
            {
                OnnoteChanging(value);
                ReportPropertyChanging("note");
                _note = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("note");
                OnnoteChanged();
            }
        }
        private global::System.String _note;
        partial void OnnoteChanging(global::System.String value);
        partial void OnnoteChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_PatientMedicin_Patient", "Patient")]
        public Patient Patient
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("HealthHistoryModel.FK_PatientMedicin_Patient", "Patient").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("HealthHistoryModel.FK_PatientMedicin_Patient", "Patient").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Patient> PatientReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("HealthHistoryModel.FK_PatientMedicin_Patient", "Patient");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Patient>("HealthHistoryModel.FK_PatientMedicin_Patient", "Patient", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_PatientMedicin_PatientReg", "PatientReg")]
        public PatientReg PatientReg
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PatientReg>("HealthHistoryModel.FK_PatientMedicin_PatientReg", "PatientReg").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PatientReg>("HealthHistoryModel.FK_PatientMedicin_PatientReg", "PatientReg").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PatientReg> PatientRegReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PatientReg>("HealthHistoryModel.FK_PatientMedicin_PatientReg", "PatientReg");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PatientReg>("HealthHistoryModel.FK_PatientMedicin_PatientReg", "PatientReg", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HealthHistoryModel", Name="PatientReg")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PatientReg : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PatientReg object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="procTypeId">Initial value of the ProcTypeId property.</param>
        public static PatientReg CreatePatientReg(global::System.Int32 id, global::System.Int32 procTypeId)
        {
            PatientReg patientReg = new PatientReg();
            patientReg.id = id;
            patientReg.ProcTypeId = procTypeId;
            return patientReg;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> patientid
        {
            get
            {
                return _patientid;
            }
            set
            {
                OnpatientidChanging(value);
                ReportPropertyChanging("patientid");
                _patientid = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("patientid");
                OnpatientidChanged();
            }
        }
        private Nullable<global::System.Int32> _patientid;
        partial void OnpatientidChanging(Nullable<global::System.Int32> value);
        partial void OnpatientidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> orgid
        {
            get
            {
                return _orgid;
            }
            set
            {
                OnorgidChanging(value);
                ReportPropertyChanging("orgid");
                _orgid = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("orgid");
                OnorgidChanged();
            }
        }
        private Nullable<global::System.Int32> _orgid;
        partial void OnorgidChanging(Nullable<global::System.Int32> value);
        partial void OnorgidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ProcTypeId
        {
            get
            {
                return _ProcTypeId;
            }
            set
            {
                OnProcTypeIdChanging(value);
                ReportPropertyChanging("ProcTypeId");
                _ProcTypeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProcTypeId");
                OnProcTypeIdChanged();
            }
        }
        private global::System.Int32 _ProcTypeId;
        partial void OnProcTypeIdChanging(global::System.Int32 value);
        partial void OnProcTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> procdate
        {
            get
            {
                return _procdate;
            }
            set
            {
                OnprocdateChanging(value);
                ReportPropertyChanging("procdate");
                _procdate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("procdate");
                OnprocdateChanged();
            }
        }
        private Nullable<global::System.DateTime> _procdate;
        partial void OnprocdateChanging(Nullable<global::System.DateTime> value);
        partial void OnprocdateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String procdesc
        {
            get
            {
                return _procdesc;
            }
            set
            {
                OnprocdescChanging(value);
                ReportPropertyChanging("procdesc");
                _procdesc = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("procdesc");
                OnprocdescChanged();
            }
        }
        private global::System.String _procdesc;
        partial void OnprocdescChanging(global::System.String value);
        partial void OnprocdescChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_PatientReg_Patient", "Patient")]
        public Patient Patient
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("HealthHistoryModel.FK_PatientReg_Patient", "Patient").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("HealthHistoryModel.FK_PatientReg_Patient", "Patient").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Patient> PatientReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("HealthHistoryModel.FK_PatientReg_Patient", "Patient");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Patient>("HealthHistoryModel.FK_PatientReg_Patient", "Patient", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_PatientMedicin_PatientReg", "PatientMedicin")]
        public EntityCollection<PatientMedicin> PatientMedicins
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PatientMedicin>("HealthHistoryModel.FK_PatientMedicin_PatientReg", "PatientMedicin");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PatientMedicin>("HealthHistoryModel.FK_PatientMedicin_PatientReg", "PatientMedicin", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_PatientReg_Proc_Type", "Proc_Type")]
        public Proc_Type Proc_Type
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Proc_Type>("HealthHistoryModel.FK_PatientReg_Proc_Type", "Proc_Type").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Proc_Type>("HealthHistoryModel.FK_PatientReg_Proc_Type", "Proc_Type").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Proc_Type> Proc_TypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Proc_Type>("HealthHistoryModel.FK_PatientReg_Proc_Type", "Proc_Type");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Proc_Type>("HealthHistoryModel.FK_PatientReg_Proc_Type", "Proc_Type", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_PatientReg_Organization", "Organization")]
        public Organization Organization
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Organization>("HealthHistoryModel.FK_PatientReg_Organization", "Organization").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Organization>("HealthHistoryModel.FK_PatientReg_Organization", "Organization").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Organization> OrganizationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Organization>("HealthHistoryModel.FK_PatientReg_Organization", "Organization");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Organization>("HealthHistoryModel.FK_PatientReg_Organization", "Organization", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HealthHistoryModel", Name="Proc_Category")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Proc_Category : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Proc_Category object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        public static Proc_Category CreateProc_Category(global::System.Int32 id, global::System.String name)
        {
            Proc_Category proc_Category = new Proc_Category();
            proc_Category.id = id;
            proc_Category.name = name;
            return proc_Category;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_Proc_Type_Proc_Category", "Proc_Type")]
        public EntityCollection<Proc_Type> Proc_Type
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Proc_Type>("HealthHistoryModel.FK_Proc_Type_Proc_Category", "Proc_Type");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Proc_Type>("HealthHistoryModel.FK_Proc_Type_Proc_Category", "Proc_Type", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HealthHistoryModel", Name="Proc_Type")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Proc_Type : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Proc_Type object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        /// <param name="categoryId">Initial value of the CategoryId property.</param>
        public static Proc_Type CreateProc_Type(global::System.Int32 id, global::System.String name, global::System.Int32 categoryId)
        {
            Proc_Type proc_Type = new Proc_Type();
            proc_Type.id = id;
            proc_Type.name = name;
            proc_Type.CategoryId = categoryId;
            return proc_Type;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CategoryId
        {
            get
            {
                return _CategoryId;
            }
            set
            {
                OnCategoryIdChanging(value);
                ReportPropertyChanging("CategoryId");
                _CategoryId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CategoryId");
                OnCategoryIdChanged();
            }
        }
        private global::System.Int32 _CategoryId;
        partial void OnCategoryIdChanging(global::System.Int32 value);
        partial void OnCategoryIdChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_PatientReg_Proc_Type", "PatientReg")]
        public EntityCollection<PatientReg> PatientRegs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PatientReg>("HealthHistoryModel.FK_PatientReg_Proc_Type", "PatientReg");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PatientReg>("HealthHistoryModel.FK_PatientReg_Proc_Type", "PatientReg", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_Proc_Type_Proc_Category", "Proc_Category")]
        public Proc_Category Proc_Category
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Proc_Category>("HealthHistoryModel.FK_Proc_Type_Proc_Category", "Proc_Category").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Proc_Category>("HealthHistoryModel.FK_Proc_Type_Proc_Category", "Proc_Category").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Proc_Category> Proc_CategoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Proc_Category>("HealthHistoryModel.FK_Proc_Type_Proc_Category", "Proc_Category");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Proc_Category>("HealthHistoryModel.FK_Proc_Type_Proc_Category", "Proc_Category", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HealthHistoryModel", Name="Sec_Users")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Sec_Users : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Sec_Users object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="username">Initial value of the Username property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        /// <param name="userTypeId">Initial value of the UserTypeId property.</param>
        public static Sec_Users CreateSec_Users(global::System.Int32 id, global::System.String username, global::System.Boolean isActive, global::System.Int32 userTypeId)
        {
            Sec_Users sec_Users = new Sec_Users();
            sec_Users.id = id;
            sec_Users.Username = username;
            sec_Users.IsActive = isActive;
            sec_Users.UserTypeId = userTypeId;
            return sec_Users;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Username
        {
            get
            {
                return _Username;
            }
            set
            {
                OnUsernameChanging(value);
                ReportPropertyChanging("Username");
                _Username = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Username");
                OnUsernameChanged();
            }
        }
        private global::System.String _Username;
        partial void OnUsernameChanging(global::System.String value);
        partial void OnUsernameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String password
        {
            get
            {
                return _password;
            }
            set
            {
                OnpasswordChanging(value);
                ReportPropertyChanging("password");
                _password = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("password");
                OnpasswordChanged();
            }
        }
        private global::System.String _password;
        partial void OnpasswordChanging(global::System.String value);
        partial void OnpasswordChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserTypeId
        {
            get
            {
                return _UserTypeId;
            }
            set
            {
                OnUserTypeIdChanging(value);
                ReportPropertyChanging("UserTypeId");
                _UserTypeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserTypeId");
                OnUserTypeIdChanged();
            }
        }
        private global::System.Int32 _UserTypeId;
        partial void OnUserTypeIdChanging(global::System.Int32 value);
        partial void OnUserTypeIdChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_Patient_Sec_Users1", "Patient")]
        public EntityCollection<Patient> Patients
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Patient>("HealthHistoryModel.FK_Patient_Sec_Users1", "Patient");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Patient>("HealthHistoryModel.FK_Patient_Sec_Users1", "Patient", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_Sec_Users_Sec_UserType", "Sec_UserType")]
        public Sec_UserType Sec_UserType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Sec_UserType>("HealthHistoryModel.FK_Sec_Users_Sec_UserType", "Sec_UserType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Sec_UserType>("HealthHistoryModel.FK_Sec_Users_Sec_UserType", "Sec_UserType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Sec_UserType> Sec_UserTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Sec_UserType>("HealthHistoryModel.FK_Sec_Users_Sec_UserType", "Sec_UserType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Sec_UserType>("HealthHistoryModel.FK_Sec_Users_Sec_UserType", "Sec_UserType", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HealthHistoryModel", Name="Sec_UserType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Sec_UserType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Sec_UserType object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="name">Initial value of the name property.</param>
        public static Sec_UserType CreateSec_UserType(global::System.Int32 id, global::System.String name)
        {
            Sec_UserType sec_UserType = new Sec_UserType();
            sec_UserType.id = id;
            sec_UserType.name = name;
            return sec_UserType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Int32 _id;
        partial void OnidChanging(global::System.Int32 value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HealthHistoryModel", "FK_Sec_Users_Sec_UserType", "Sec_Users")]
        public EntityCollection<Sec_Users> Sec_Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Sec_Users>("HealthHistoryModel.FK_Sec_Users_Sec_UserType", "Sec_Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Sec_Users>("HealthHistoryModel.FK_Sec_Users_Sec_UserType", "Sec_Users", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HealthHistoryModel", Name="sysdiagram")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class sysdiagram : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new sysdiagram object.
        /// </summary>
        /// <param name="name">Initial value of the name property.</param>
        /// <param name="principal_id">Initial value of the principal_id property.</param>
        /// <param name="diagram_id">Initial value of the diagram_id property.</param>
        public static sysdiagram Createsysdiagram(global::System.String name, global::System.Int32 principal_id, global::System.Int32 diagram_id)
        {
            sysdiagram sysdiagram = new sysdiagram();
            sysdiagram.name = name;
            sysdiagram.principal_id = principal_id;
            sysdiagram.diagram_id = diagram_id;
            return sysdiagram;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 principal_id
        {
            get
            {
                return _principal_id;
            }
            set
            {
                Onprincipal_idChanging(value);
                ReportPropertyChanging("principal_id");
                _principal_id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("principal_id");
                Onprincipal_idChanged();
            }
        }
        private global::System.Int32 _principal_id;
        partial void Onprincipal_idChanging(global::System.Int32 value);
        partial void Onprincipal_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 diagram_id
        {
            get
            {
                return _diagram_id;
            }
            set
            {
                if (_diagram_id != value)
                {
                    Ondiagram_idChanging(value);
                    ReportPropertyChanging("diagram_id");
                    _diagram_id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("diagram_id");
                    Ondiagram_idChanged();
                }
            }
        }
        private global::System.Int32 _diagram_id;
        partial void Ondiagram_idChanging(global::System.Int32 value);
        partial void Ondiagram_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> version
        {
            get
            {
                return _version;
            }
            set
            {
                OnversionChanging(value);
                ReportPropertyChanging("version");
                _version = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("version");
                OnversionChanged();
            }
        }
        private Nullable<global::System.Int32> _version;
        partial void OnversionChanging(Nullable<global::System.Int32> value);
        partial void OnversionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] definition
        {
            get
            {
                return StructuralObject.GetValidValue(_definition);
            }
            set
            {
                OndefinitionChanging(value);
                ReportPropertyChanging("definition");
                _definition = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("definition");
                OndefinitionChanged();
            }
        }
        private global::System.Byte[] _definition;
        partial void OndefinitionChanging(global::System.Byte[] value);
        partial void OndefinitionChanged();

        #endregion

    
    }

    #endregion

    
}
